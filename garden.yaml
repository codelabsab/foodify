kind: Project
name: foodify
environments:
  - name: local
    variables:
      repository-url: ""
  - name: dev
    production: true
defaultEnvironment: local
providers:
  - name: local-kubernetes
    environments: ["local"]
  - name: kubernetes
    context: ${var.kube-context}
    defaultHostname: "api.mydomain.com"
    deploymentRegistry:
      hostname: eu.gcr.io
      namespace: ${var.project-id}
    setupIngressController: false
    environments: ["dev"]
---
kind: Module
description: Prometheus is used for metrics collection
type: helm
name: prometheus
repo: https://kubernetes-charts.storage.googleapis.com/
chart: prometheus-operator
version: "8.13.12"
values:
  grafana:
    enabled: false
  prometheus:
    prometheusSpec:
      serviceMonitorSelectorNilUsesHelmValues: true
    additionalServiceMonitors:
      - name: grafana
        endpoints:
          - port: web
            interval: 5s
        selector:
          matchLabels:
            service: grafana
---
kind: Module
description: Loki stores logs for usage in grafana
type: helm
name: loki
repo: https://grafana.github.io/loki/charts
chart: loki-stack
version: "0.37.3"
values:
  promtail:
    enabled: true
    loki:
      serviceName: loki
---
kind: Module
description: Postgresql stores our event log
disabled: ${environment.name != 'local'}
type: helm
name: postgres
repo: https://charts.bitnami.com/bitnami
chart: postgresql
version: "8.10.14"
values:
  postgresqlDatabase: postgres
  postgresqlUsername: user
  postgresqlPassword: password
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
---
kind: Module
description: Elastic Search stores our views
type: helm
name: elasticsearch
repo: https://charts.bitnami.com/bitnami
chart: elasticsearch
version: "12.5.1"
---
kind: Module
description: Kafka passes messages
type: helm
name: kafka
repo: https://charts.bitnami.com/bitnami
chart: kafka
version: "11.3.2"

########################################
## RECIPE COMMAND                     ##
########################################
---
kind: Module
name: recipe-command-local
disabled: ${environment.name != 'local'}
type: container
dockerfile: Dockerfile
build:
  targetImage: recipe_command
services:
  - name: recipe-command
    dependencies:
      - postgres
    env:
      POSTGRES_URI: 'postgres://user:password@postgres-postgresql:5432/postgres'
      KAFKA_URI: "kafka:9092"
    ports:
      - name: http
        containerPort: 9000
      - name: grpc
        containerPort: 4071
    healthCheck:
      httpGet:
        port: http
        path: /health
---
kind: Module
name: recipe-command
disabled: ${environment.name == 'local'}
type: container
dockerfile: prod.Dockerfile
build:
  targetImage: recipe_command
---
kind: Module
name: recipe-command-k8s
disabled: ${environment.name == 'local'}
type: kubernetes
manifests:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: mysecret
    type: Opaque
    stringData:
      postgres_credentials.json: |-
        ${var.postgres-service-account}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: recipe-command-deployment
      labels:
        app: recipe-command
    spec:
      replicas: 3
      selector:
        matchLabels:
          app: recipe-command
      template:
        metadata:
          labels:
            app: recipe-command
        spec:
          containers:
            - name: recipe-command
              image: ${modules.recipe-command.outputs.deployment-image-name}:${modules.recipe-command.version}
              env:
                - name: POSTGRES_URI
                  value: "${environment.name == 'local' ? 'postgres://user:password@postgres-postgresql:5432/postgres' : 'postgres://${var.postgres-username}:${var.postgres-password}@${var.postgres-ip}:5432/postgres'}"
                - name: KAFKA_URI
                  value: "kafka:9092"
              ports:
                - name: grpc
                  containerPort: 4071
                - name: http
                  containerPort: 9000
              livenessProbe:
                path: /health
                port: http
                initialDelaySeconds: 3
                periodSeconds: 3
            - name: cloudsql-proxy
              image: gcr.io/cloudsql-docker/gce-proxy:1.16
              command: ["/cloud_sql_proxy",
                        "-instances=${var.postgres-connection-name}=tcp:3306",
                        "-credential_file=/cloudsql/postgres_credentials.json"]
              volumeMounts:
                - name: postgres-service-account-volume
                  mountPath: /cloudsql
                  readOnly: true
              volumes:
                - name: postgres-service-account-volume
                  secret:
                    secretName: postgres-service-account
  - apiVersion: v1
    kind: Service
    metadata:
      name: recipe-command
    spec:
      selector:
        app: recipe-command
      ports:
        - protocol: TCP
          port: grpc
        - protocol: TCP
          port: http


########################################
## RECIPE QUERY                       ##
########################################
---
kind: Module
name: recipe-query
type: container
dockerfile: "${environment.name == 'local' ? 'Dockerfile' : 'prod.Dockerfile'}"
build:
  targetImage: recipe_query
services:
  - name: recipe-query
    dependencies:
      - postgres
    env:
      POSTGRES_URI: "${environment.name == 'local' ? 'postgres://user:password@postgres-postgresql:5432/postgres' : 'postgres://${var.postgres-username}:${var.postgres-password}@${var.postgres-ip}:5432/postgres'}"
      KAFKA_URI: "kafka:9092"
      ELASTIC_SEARCH_URI: "http://elasticsearch-elasticsearch-master:9200"
    ports:
      - name: http
        containerPort: 9000
    healthCheck:
      httpGet:
        port: http
        path: /health

########################################
## API                                ##
########################################
---
kind: Module
name: api
type: container
dockerfile: "${environment.name == 'local' ? 'Dockerfile' : 'prod.Dockerfile'}"
build:
  targetImage: api
services:
  - name: api
    ingresses:
      - path: /api
        port: http
    env:
      ELASTIC_SEARCH_URI: "http://elasticsearch-elasticsearch-master:9200"
    dependencies:
      - recipe-command
    ports:
      - name: http
        containerPort: 9000
    healthCheck:
      httpGet:
        port: http
        path: /api
---
kind: Module
name: api-ingress
type: kubernetes
disabled: ${environment.name == 'local'}
manifests:
  - apiVersion: networking.k8s.io/v1beta1
    kind: Ingress
    metadata:
      name: api-ingress
    spec:
      rules:
        - http:
            paths:
              - path: /
                backend:
                  serviceName: api
                  servicePort: 9000
